import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Percorso del file CSV
file_path = 'data/clienti_sintetico.csv'

try:
    # Carica il dataset
    cliente_df = pd.read_csv(file_path)

    # Selezione delle feature per il clustering
    features_per_clustering = ['Spesa_Totale', 'Numero_Ordini', 'Frequenza_Visite']
    X = cliente_df[features_per_clustering]

    # Standardizzazione delle feature
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Lista per memorizzare l'inerzia per diversi valori di k
    inertia = []
    range_n_clusters = range(1, 11) # Proviamo k da 1 a 10

    # Calcola l'inerzia per ogni valore di k
    for n_clusters in range_n_clusters:
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        kmeans.fit(X_scaled)
        inertia.append(kmeans.inertia_)

    # Grafico del metodo del gomito
    plt.figure(figsize=(10, 6))
    plt.plot(range_n_clusters, inertia, marker='o', linestyle='-')
    plt.title('Metodo del Gomito per trovare il numero ottimale di cluster')
    plt.xlabel('Numero di cluster (k)')
    plt.ylabel('Inerzia')
    plt.xticks(range_n_clusters)
    plt.grid(True)
    plt.show()

except FileNotFoundError:
    print(f"Errore: Il file '{file_path}' non è stato trovato. Assicurati che il percorso sia corretto.")
except ImportError as e:
    print(f"Errore di importazione: {e}. Assicurati che la libreria sia installata.")
except Exception as e:
    print(f"Si è verificato un errore durante l'esecuzione del metodo del gomito: {e}")
